#!/bin/sh

# set -e

export PATH=/usr/bin:/usr/sbin:/bin:/sbin

mountpoint=/rootfs
mkdir -p $mountpoint

root_persistence_entity=".root_cow_loop.ext2"
root_persistence_type="loop"
home_persistence_entity="home-rw"
loop_mount_rw="rw"

parse_cmdline() {
    for x in $(cat /proc/cmdline); do
        case $x in
            rootpersistent)
                export root_persistent="Yes";;
            rootpersistenttype=*)
                export root_persistence_type="${x#rootpersistenttype=}";;
            rootpersistententity=*)
                export root_persistence_entity="${x#rootpersistententity=}";;
            homepersistent)
                export home_persistent="Yes";;
            homepersistententity=*)
                export home_persistence_entity="${x#homepersistententity=}";;
            nopersistent)
                export root_persistent=""
                export home_persistent="";;
            rfsfile)
                export rfsfile="${x#rfsfile=}";;
            toram)
                export TORAM="Yes" ;;
            looptype=squash)
                export loop_mount_rw="ro" ;;
        esac
    done
}

setup_loop() {
    local fspath=$1

    udevadm settle

    dev="$(losetup -f)"
    if [ "$dev" ]; then
        losetup "$dev" "$fspath"
        echo "$dev"
        return 0
    else
        panic "No loop devices available"
    fi
}


setup_unionfs() {
    livefs_root="$1"
    rootmnt="$2"

    image="$livefs_root/${rfsfile}"
    if [ ! -f "$image" ]; then
        panic "No file $image found to mount as loop rootfs"
    fi

    if [ ! -z $TORAM ]; then
        echo "Copying live_media to $TORAM"
        copyto="${livefs_root}_swap"

        mkdir -p $copyto
        echo "mount -t tmpfs /dev/shm $copyto"
        mount -t tmpfs /dev/shm $copyto
    
        # "cp -a" from busybox also copies hidden files
        cp -a $image $copyto 

        # This will unmount the original mountpoint.  This is possible as it
        # makes a tmpfs and copies the squashfs to it, not needing the original
        # mount anymore.
        umount $livefs_root
        mount -r -o move $copyto $livefs_root

        # never use rm -rf, who knows what stupid mistakes I've made.. It was
        # copying / entirely, the full 160G .. :-)
        rmdir $copyto

        image="$livefs_root/"$(basename "$image")
    fi

    homemount=/home
    if [ -n "$home_persistent" ]; then
        homecow="/dev/disk/by-label/$home_persistence_entity"
        i=0
        while [ "$i" -lt 10 ]; do
            echo "udevadm trigger+settle called for $homecow"
            udevadm trigger
            udevadm settle
            echo "Try mounting homedir $homecow to $homemount"
            if [ -b "$homecow" ]; then
                echo "$home_persistence_entity is a block device, proceeding"
                mkdir -p $homemount
                mount -o rw,noatime,nodiratime "$homecow" $homemount
                break
            fi
            sleep 1
            i="$(($i + 1))"
        done
        [ $i == 10 ] && panic "No $homecow mounted to $homemount"
    else
        echo "Not mounting a homedir"
    fi

    # run-init can't deal with images in a subdir, but we're going to move all
    # of these away before it runs anyway.  No, we're not, put them in / since
    # move-mounting them into / breaks mono and some other apps.

    # Let's just mount the base (source) file systems first: loop device,
    # usually read-only, however, it's possible it's not.
    ro_mount="/rofs_mount"
    backdev=$(setup_loop "$image")
    echo "Mounting rofs $image to ${ro_mount}"
    mkdir -p "$ro_mount"
    mount -o $loop_mount_rw,noatime "${backdev}" "${ro_mount}" \
        || panic "Can not mount $backdev ($image) on ${ro_mount}"

    cowdevice="tmpfs"
    cow_mountopt="rw,noatime,nodiratime,mode=755,exec"
    cow_fstype="-t tmpfs"
    if [ ! -z $root_persistent ]; then
        if [ $root_persistence_type = 'loop' ]; then
            if [ -z $homecow ]; then
                echo "rootpersistent loop requested, but no homepersistent, disabling..."
            else
                lo_file=$homemount/$root_persistence_entity
                echo "Mounting a loop $lo_file file as cow"
                if [ ! -e $lo_file ]; then
                    echo "No loop file $lo_file found, making one"
                    gunzip -c /empty_ext2_fs.gz > $lo_file
                fi
                cowdevice=$(setup_loop $lo_file)
                cow_fstype=""
                cow_mountopt="rw,noatime,nodiratime,exec"
            fi
        else 
            echo "Searching for cow persistent medium $root_persistence_entity"
            cc="/dev/disk/by-label/$root_persistence_entity"
            if [ -b "$cc" ]; then
                cowdevice="${cc}"
                cow_fstype=""
                cow_mountopt="rw,noatime,nodiratime,exec"
            else
                echo "Unable to find the cow persistent medium $root_persistence_entity"
            fi
        fi
    fi

    if [ $loop_mount_rw == 'ro' ]; then
        echo "Mounting a cow fs ${cow_fstype} -o ${cow_mountopt} ${cowdevice} to /cow"
        mkdir -p /cow
        mount ${cow_fstype} -o ${cow_mountopt} ${cowdevice} /cow \
            || panic "Can not mount $cowdevice on /cow"

        echo "Mounting the aufs on $rootmnt"
        mount -t aufs -o exec,noatime,nodiratime,dirs=/cow=rw:${ro_mount}=rr aufs $rootmnt \
            || panic "aufs mount failed"

        # show all the rofs
        for d in $ro_mount; do
            mkdir -p "$rootmnt/mnt/${d##*/}"
            mount -o move $d "${rootmnt}/mnt/${d##*/}"
        done

        # shows cow fs on /cow
        mkdir -p $rootmnt/mnt/cow
        mount -o move /cow $rootmnt/mnt/cow

        mkdir -p $rootmnt/mnt/$(basename $livefs_root)
        mount -o move $livefs_root $rootmnt/mnt/$(basename $livefs_root)
    else
        mount -o move $ro_mount $rootmnt
    fi

    if [ ! -z $homecow ]; then
        mkdir -p $rootmnt/home
        mount -o move $homemount $rootmnt/home
    fi

}

mountroot() {

    echo "FASTBOOT's mountroot called"

    parse_cmdline

    if [ ! -z "$ROOT" ]; then
        i=0
        echo "udevadm trigger+settle called for $ROOT"
        udevadm trigger
        udevadm settle
        while [ "$i" -lt 1 ]; do
            if [ -b "$ROOT" ] ; then
                echo "Mounting $ROOT on $mountpoint"
                mount $ROOT $mountpoint
                livefs_root=$mountpoint
                break
            else
                homecow="/dev/disk/by-label/$home_persistence_entity"
                if [ -b "$homecow" ] ; then
                    mount -o ro,noatime,nodiratime "$homecow" $mountpoint
                    livefs_root=$mountpoint
                    break   
                fi
            fi
            echo "udevadm trigger+settle called for $ROOT"
            udevadm trigger
            udevadm settle
            i="$(($i + 1))"
        done
        [ $i == 10 ] && panic "No $ROOT or $homecow"
    fi

    if [ -z $livefs_root ]; then
        panic "Unable to find a medium containing a live file system"
    fi

    if [ -f $mountpoint/etc/fastboot.conf ]; then
        . $mountpoint/etc/fastboot.conf
    fi

    if [ ! -z "$home_persistent" -o ! -z "$root_persistent" ]; then
        echo "Making new root with aufs in $rootmnt"
        setup_unionfs "$livefs_root" "$rootmnt"
    else
        mount -o move $livefs_root $rootmnt
    fi

    echo "FASTBOOT's mountroot done"
}

# actually execute
mountroot
