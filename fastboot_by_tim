#!/bin/sh

# set -e

export PATH=/usr/bin:/usr/sbin:/bin:/sbin

mountpoint=/rootfs
mkdir -p $mountpoint

root_persistence_entity=".root_cow_loop.ext2"
root_persistence_type="loop"
home_persistence_entity="home-rw"

if [ ! -x "/bin/fstype" ]; then
    # klibc not in path -> not in initramfs
    export PATH="${PATH}:/usr/lib/klibc/bin"
fi

get_fstype() {
    local FSTYPE
    local FSSIZE
    eval $(fstype < $1)
    if [ "$FSTYPE" != "unknown" ]; then
        echo $FSTYPE
        return 0
    fi
    /lib/udev/vol_id -t $1 2>/dev/null
}

parse_cmdline() {
    for x in $(cat /proc/cmdline); do
        case $x in
            rootpersistent)
                export root_persistent="Yes";;
            rootpersistenttype=*)
                export root_persistent_type="${x#rootpersistenttype=}";;
            rootpersistententity=*)
                export root_persistence_entity="${x#rootpersistententity=}";;
            homepersistent)
                export home_persistent="Yes";;
            homepersistententity=*)
                export home_persistence_entity="${x#homepersistententity=}";;
            nopersistent)
                export root_persistent=""
                export home_persistent="";;
            rfsfile)
                export rfsfile="${x#rfsfile=}";;
            toram)
                export TORAM="Yes" ;;
        esac
    done
}

setup_loop() {
    local fspath=$1

    modprobe -b loop
    udevadm settle

    dev="$(losetup -f)"
    if [ "$dev" ]; then
        losetup "$dev" "$fspath"
        echo "$dev"
        return 0
    else
        panic "No loop devices available"
    fi
}


setup_unionfs() {
    livefs_root="$1"
    rootmnt="$2"

    image="$livefs_root/${rfsfile}"
    if [ ! -f "$image" ]; then
        panic "No file $image found to mount as loop rootfs"
    fi

    if [ ! -z $TORAM ]; then
        echo "Copying live_media to $TORAM"
        copyto="${livefs_root}_swap"

        mkdir -p $copyto
        echo "mount -t tmpfs /dev/shm $copyto"
        mount -t tmpfs /dev/shm $copyto
    
        # "cp -a" from busybox also copies hidden files
        cp -a $image $copyto 

        # This will unmount the original mountpoint.  This is possible as it
        # makes a tmpfs and copies the squashfs to it, not needing the original
        # mount anymore.
        umount $livefs_root
        mount -r -o move $copyto $livefs_root

        # never use rm -rf, who knows what stupid mistakes I've made.. It was
        # copying / entirely, the full 160G .. :-)
        rmdir $copyto

        image="$livefs_root/"$(basename "$image")
    fi

    homemount=/home
    if [ -n "$home_persistent" ]; then
        homecow="/dev/disk/by-label/$home_persistence_entity"
        i=0
        while [ "$i" -lt 10 ]; do
            echo "udevadm trigger+settle called for $homecow"
            udevadm trigger
            udevadm settle
            echo "Try mounting homedir $homecow to $homemount"
            if [ -b "$homecow" ]; then
                echo "$home_persistence_entity is a block device, proceeding"
                mkdir -p $homemount
                mount -t $(get_fstype "$homecow") -o rw,noatime,nodiratime "$homecow" $homemount
                break
            fi
            sleep 1
            i="$(($i + 1))"
        done
    else
        echo "Not mounting a homedir"
    fi

    modprobe -b aufs

    # run-init can't deal with images in a subdir, but we're going to move all
    # of these away before it runs anyway.  No, we're not, put them in / since
    # move-mounting them into / breaks mono and some other apps.

    croot="/"

    # Let's just mount the read-only file systems first
    rofsstring=""
    rofslist=""

    mkdir -p "${croot}"
    backdev=$(setup_loop "$image")
    fstype=$(get_fstype "${backdev}")
    if [ "${fstype}" = "unknown" ]; then
        panic "Unknown file system type on ${backdev} (${image})"
    fi
    mkdir -p "${croot}/rofs_mount"
    echo "Mounting rofs $image to $croot/rofs_mount"
    mount -t "${fstype}" -o ro,noatime "${backdev}" \
        "${croot}/rofs_mount" \
        || panic "Can not mount $backdev ($image) on ${croot}/rofs_mount"
    rofsstring="${croot}/rofs_mount=rr:${rofsstring}"
    rofslist="${croot}/rofs_mount ${rofslist}"
    rofsstring=${rofsstring%:}

    mkdir -p /cow
    cowdevice="tmpfs"
    cow_fstype="tmpfs"
    cow_mountopt="rw,noatime,mode=755,exec"

    if [ ! -z $root_persistent ]; then
        if [ $root_persistence_type = 'loop' ]; then
            if [ -z $homecow ]; then
                echo "rootpersistent loop requested, but no homepersistent, disabling..."
            else
                lo_file=$homemount/$root_persistence_entity
                echo "Mounting a loop $lo_file file as cow"
                if [ ! -e $lo_file ]; then
                    echo "No loop file $lo_file found, making one"
                    gunzip -c /empty_ext2_fs.gz > $lo_file
                fi
                cowdevice=$(setup_loop $lo_file)
                cow_fstype=$(get_fstype $cowdevice)
                cow_mountopt="rw,noatime,nodiratime,exec"
            fi
        else 
            echo "Searching for cow persistent medium $root_persistence_entity"
            cc="/dev/disk/by-label/$root_persistence_entity"
            if [ -b "$cc" ]; then
                cowdevice="${cc}"
                cow_fstype=$(get_fstype "$cowdevice")
                cow_mountopt="rw,noatime,nodiratime,exec"
            else
                echo "Unable to find the cow persistent medium $root_persistence_entity"
            fi
        fi
    fi

    echo "Mounting a cow fs $cow_fstype to /cow"
    mount -t ${cow_fstype} -o ${cow_mountopt} ${cowdevice} /cow \
        || panic "Can not mount $cowdevice on /cow"

    echo "Mounting the aufs on $rootmnt"
    mount -t aufs -o exec,noatime,nodiratime,dirs=/cow=rw:$rofsstring aufs $rootmnt \
        || panic "aufs mount failed"

    if [ ! -z $homecow ]; then
        mkdir -p $rootmnt/home
        mount -o move $homemount $rootmnt/home
    fi

    # show all the rofs
    for d in $rofslist; do
        mkdir -p "$rootmnt/mnt/${d##*/}"
        mount -o move $d "${rootmnt}/mnt/${d##*/}"
    done

    # shows cow fs on /cow
    mkdir -p $rootmnt/mnt/cow
    mount -o move /cow $rootmnt/mnt/cow

    mkdir -p $rootmnt/mnt/$(basename $livefs_root)
    mount -o move $livefs_root $rootmnt/mnt/$(basename $livefs_root)
}

mountroot() {

    echo "FASTBOOT's mountroot called"

    parse_cmdline

    if [ ! -z "$ROOT" ]; then
        i=0
        while [ "$i" -lt 10 ]; do
            echo "udevadm trigger+settle called for $ROOT"
            udevadm trigger
            udevadm settle
            if [ -b "$ROOT" ] ; then
                rootfstype=$(get_fstype $ROOT)
                mount -t $rootfstype $ROOT $mountpoint
                livefs_root=$mountpoint
                break
            else
                homecow="/dev/disk/by-label/$home_persistence_entity"
                if [ -b "$homecow" ] ; then
                    mount -t $(get_fstype "$homecow") -o ro,noatime,nodiratime "$homecow" $mountpoint
                    livefs_root=$mountpoint
                    break   
                fi
            fi
            sleep 1
            i="$(($i + 1))"
        done
    fi

    if [ -z "$livefs_root" ]; then
        panic "Unable to find a medium containing a live file system"
    fi

    udevadm trigger
    udevadm settle

    echo "Making new root with aufs in $rootmnt"
    setup_unionfs "$livefs_root" "$rootmnt"

    mkdir -p /dev/pts
    mkdir -p /dev/shm

    if [ -f $rootmnt/etc/fastboot_by_tim.conf ]; then
        . $rootmnt/etc/fastboot_by_tim.conf
    fi

    echo "FASTBOOT's mountroot done"

}
