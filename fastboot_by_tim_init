#!/bin/busybox sh

PATH=$PATH:/sbin:/usr/sbin:/bin:/usr/bin
export PATH

panic(){
    echo $@
	PS1='(initramfs|panic) ' /bin/sh -i </dev/console >/dev/console 2>&1
}
export panic

# Set modprobe env
export MODPROBE_OPTIONS="-qb"

# mount /sys and /proc
[ -d /sys  ] || mkdir /sys
[ -d /proc ] || mkdir /proc
mount -t sysfs -o nodev,noexec,nosuid none /sys   || panic "Oeps"
mount -t proc  -o nodev,noexec,nosuid none /proc  || panic "Oeps"
mkdir -p /var/lock

# make a rootmnt
export rootmnt=/root
[ -d $rootmnt ] || mkdir -m 0700 $rootmnt

# mount a tmpfs
[ -d /tmp  ] || mkdir /tmp
mount -t tmpfs /dev/shm /tmp

# Note that this only becomes /dev on the real filesystem if udev's scripts
# are used; which they will be, but it's worth pointing out
[ -d /dev  ] || mkdir -m 0755 /dev
if ! mount -t devtmpfs -o mode=0755 none /dev; then
       mount -t tmpfs -o mode=0755 none /dev || panic "Oeps"
       mknod -m 0600 /dev/console c 5 1
       mknod /dev/null c 1 3
fi

# mount pts
mkdir /dev/pts
mount -t devpts -o noexec,nosuid,gid=5,mode=0620 none /dev/pts || panic "Oeps"

# Export relevant variables
export init=/sbin/init

# Parse command line options
for x in $(cat /proc/cmdline); do
	case $x in
	init=*)
		init=${x#init=}
		;;
	root=*)
		ROOT=${x#root=}
		case $ROOT in
		LABEL=*)
			ROOT="${ROOT#LABEL=}"

			# support / in LABEL= paths (escape to \x2f)
			case "${ROOT}" in
			*[/]*)
			if [ -x "$(command -v sed)" ]; then
				ROOT="$(echo ${ROOT} | sed 's,/,\\x2f,g')"
			else
				if [ "${ROOT}" != "${ROOT#/}" ]; then
					ROOT="\x2f${ROOT#/}"
				fi
				if [ "${ROOT}" != "${ROOT%/}" ]; then
					ROOT="${ROOT%/}\x2f"
				fi
				IFS='/'
				newroot=
				for s in $ROOT; do
					if [ -z "${newroot}" ]; then
						newroot="${s}"
					else
						newroot="${newroot}\\x2f${s}"
					fi
				done
				unset IFS
				ROOT="${newroot}"
			fi
			esac
			ROOT="/dev/disk/by-label/${ROOT}"
			;;
		UUID=*)
			ROOT="/dev/disk/by-uuid/${ROOT#UUID=}"
			;;
		esac
		;;
	esac
done

export ROOT

# Load custom modules first
load_modules()
{
       if [ -e /conf/modules ]; then
               cat /conf/modules | while read m; do
                       # Skip empty lines
                       if [ -z "$m" ];  then
                               continue
                       fi
                       # Skip comments - d?ash removes whitespace prefix
                       com=$(printf "%.1s" "${m}")
                       if [ "$com" = "#" ]; then
                               continue
                       fi
                       modprobe $m
               done
       fi
}
load_modules

# Start the udev daemon to process events
/sbin/udevd --resolve-names=never &
udevdpid=$!

# Iterate sysfs and fire off everything; if we include a rule for it then
# it'll get handled; otherwise it'll get handled later when we do this again
# in the main boot sequence.
( /sbin/udevadm trigger --subsystem-match=block; \
  /sbin/udevadm trigger --subsystem-nomatch=block; ) &

# mount the root
if [ -e /fastboot_by_tim ]; then
    . /fastboot_by_tim
else
    panic "No /fastboot_by_tim found"
fi
mountroot
#mount /dev/ps3da1 $rootmnt

# Stop udevd, we'll miss a few events while we run init, but we catch up
kill $udevdpid

[ -d $rootmnt/dev  ] || mkdir $rootmnt/dev
[ -d $rootmnt/sys  ] || mkdir $rootmnt/sys
[ -d $rootmnt/proc ] || mkdir $rootmnt/proc
[ -d $rootmnt/tmp  ] || mkdir $rootmnt/tmp

# Move /dev to the real filesystem
mount -n -o move /dev  ${rootmnt}/dev
# Move virtual filesystems over to the real filesystem
mount -n -o move /sys  ${rootmnt}/sys
mount -n -o move /proc ${rootmnt}/proc
# move the tmpfs
mount -n -o move /tmp  ${rootmnt}/tmp

# init
exec run-init ${rootmnt} ${init} "$@" <${rootmnt}/dev/console >${rootmnt}/dev/console 2>&1
